name: 'PHPCS'
on:
  workflow_call:
    secrets:
      access-token:
        description: 'GitHub Access Token'
        required: true
    inputs:
      ref:
        description: 'Git Commit Ref (branch, tag, or hash)'
        required: true
        type: string
      php_version:
        description: 'PHP Version'
        required: false
        type: string
        default: '7.4'
jobs:
  phpcs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      # ------------------------------------------------------------------------------
      # Prepare our cache directories
      # ------------------------------------------------------------------------------
      - name: Get Composer Cache Directory
        id: get-composer-cache-dir
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        id: composer-cache
        with:
          path: ${{ steps.get-composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - uses: "shivammathur/setup-php@v2"
        with:
          php-version: ${{ inputs.php_version }}
      - uses: "ramsey/composer-install@v2"

      - name: "Give permissions"
        run: |
          sudo chown -R root:root $GITHUB_WORKSPACE

      # ------------------------------------------------------------------------------
      # PHPCS
      # ------------------------------------------------------------------------------
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]
      - name: Run reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.access-token }}
        run: |
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . ':!tests' | grep '\.php$' )
          echo "$CHANGED_FILES"
          NEED_TO_FAIL=0

          MERGED_JSON="[]"
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES"
            IFS=$'\n' read -d '' -r -a FILE_ARRAY <<<"$CHANGED_FILES"
            echo $?
            declare -p FILE_ARRAY
              for FILE in "${FILE_ARRAY[@]}"; do
                  # New line
                  echo ""
                  echo "vendor/bin/phpcs --report=json \"$FILE\""
                  JSON_REPORT=$(vendor/bin/phpcs --report=json "$FILE" 2>/dev/null || echo "")
                  PHPCS_EXIT_CODE=$?

                  echo "JSON REPORT FOR FILE $FILE: $JSON_REPORT"

                  # Validate the JSON
                  if [ -n "$JSON_REPORT" ] && echo "$JSON_REPORT" | jq empty; then
                      # Check if the JSON report contains valid "files" key
                      if echo "$JSON_REPORT" | jq -e '.files' > /dev/null; then
                          MERGED_JSON=$(echo "$MERGED_JSON" | jq --argjson report "$JSON_REPORT" '. + [$report]')
                      fi
                  fi

                  # check if PHPCS_EXIT_CODE is not 0
                  if [ $PHPCS_EXIT_CODE -ne 0 ]; then
                      NEED_TO_FAIL=1
                  fi
              done <<< "$CHANGED_FILES"
          fi

          echo "Merged JSON is: $MERGED_JSON"
          # Check if phpcs produced a JSON report
          if [ -z "$MERGED_JSON" ]; then
              echo "No JSON report generated by phpcs"
              exit 1
          fi

          # Validate the merged JSON
          if ! echo "$MERGED_JSON" | jq empty; then
              echo "Invalid JSON: $MERGED_JSON"
              exit 1
          fi

          # Process JSON and run reviewdog
          echo "$MERGED_JSON" | jq -r 'map(.files | to_entries[] | .key as $path | .value.messages[] as $msg | "\($path):\($msg.line):\($msg.column):`\($msg.source)`<br>\($msg.message)") | .[]'

          # Exit with the original phpcs exit code
          exit $NEED_TO_FAIL